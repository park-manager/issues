security:
    encoders:
        'ParkManager\Infrastructure\Security\SecurityUser':
            algorithm: auto

    providers:
        app: { id: 'park_manager.security.user_provider' }
        api: { id: 'park_manager.security.user_provider' }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            pattern: '^/api/'
            provider: api
            anonymous: false
            stateless: true

            http_basic: ~ # XXX Needs a custom guard and user for split-token with hex-encoded

        client:
            pattern: '^/'
            context: app
            provider: app
            anonymous: true

            logout:
                csrf_parameter:       _csrf_token
                csrf_token_generator: security.csrf.token_manager
                csrf_token_id:        logout_client
                path:                 '/logout'
                target:               '/'
            guard:
                authenticators:
                    - park_manager.security.guard.form

            remember_me:
                secret:               '%env(APP_SECRET)%'
                token_provider:       ~
                catch_exceptions:     true
                name:                 CLIENT_REMEMBERME
                lifetime:             604800 # one week
                path:                 /
                secure:               true
                httponly:             true
                always_remember_me:   false

            switch_user: { role: CAN_SWITCH_USER, parameter: _impersonate_user }

    access_decision_manager:
        strategy: priority # Stop as soon as one voter votes deny or allow
        allow_if_all_abstain: false

    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/admin/', requires_channel: https, role: ROLE_ADMIN }
        - { path: '^/login$', requires_channel: https, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/password-reset', requires_channel: https, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/', requires_channel: https, role: ROLE_USER }
