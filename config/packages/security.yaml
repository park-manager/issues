security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext

        'ParkManager\Bundle\CoreBundle\Security\AdministratorUser':
            algorithm: auto
        'ParkManager\Bundle\CoreBundle\Security\ClientUser':
            algorithm: auto

    providers:
        in_memory: { memory: ~ }
        administrator: { id: 'park_manager.security.user_provider.administrator' }
        client: { id: 'park_manager.security.user_provider.client_user' }
        api: { id: 'park_manager.security.user_provider.client_user' }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        admin:
            pattern: '^/admin/'
            provider: administrator
            context: admin
            anonymous: true

            logout:
                csrf_parameter:       _csrf_token
                csrf_token_generator: security.csrf.token_manager
                csrf_token_id:        logout_admin
                path:                 '/admin/logout'
                target:               '/admin/'
            guard:
                authenticators:
                    - park_manager.security.guard.form.administrator

            remember_me:
                secret:               '%env(APP_SECRET)%'
                token_provider:       ~
                catch_exceptions:     true
                name:                 ADMIN_REMEMBERME
                lifetime:             604800 # one week
                path:                 admin/
                domain:               '%park_manager.config.primary_host%'
                secure:               '%park_manager.config.is_secure%'
                httponly:             true
                always_remember_me:   false

        # Must be checked before the 'client' firewall as the pattern matches everything;
        # But has some special conditions for the host and cookie presence.
        private:
            request_matcher: park_manager.section.private.request_matcher
            provider: administrator
            context: admin
            anonymous: true

            # The Admin section manages authentication; logout is disabled for this firewall
            guard:
                authenticators:
                    - park_manager.security.guard.form.administrator

        api:
            request_matcher: park_manager.section.api.request_matcher
            provider: api
            anonymous: false
            stateless: true

            http_basic: ~ # XXX Needs a custom guard and user for split-token with hex-encoded

        client:
            pattern: '^/'
            provider: client
            anonymous: true

            logout:
                csrf_parameter:       _csrf_token
                csrf_token_generator: security.csrf.token_manager
                csrf_token_id:        logout_client
                path:                 '/logout'
                target:               '/'
            guard:
                authenticators:
                    - park_manager.security.guard.form.client

            remember_me:
                secret:               '%env(APP_SECRET)%'
                token_provider:       ~
                catch_exceptions:     true
                name:                 CLIENT_REMEMBERME
                lifetime:             604800 # one week
                path:                 /
                secure:               '%park_manager.config.is_secure%'
                httponly:             true
                always_remember_me:   false

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Admin
        - { path: '^/admin/login$', requires_channel: '%park_manager.config.requires_channel%', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/admin/password-reset/confirm', requires_channel: '%park_manager.config.requires_channel%', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/admin/', requires_channel: '%park_manager.config.requires_channel%', role: ROLE_ADMIN }

        # Client
        - { path: '^/login$', requires_channel: '%park_manager.config.requires_channel%', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/password-reset', requires_channel: '%park_manager.config.requires_channel%', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/', requires_channel: '%park_manager.config.requires_channel%', role: ROLE_USER }
